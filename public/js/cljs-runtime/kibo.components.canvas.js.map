{"version":3,"file":"kibo.components.canvas.js","sources":["kibo/components/canvas.cljs"],"mappings":";;;;AAIA,GAAA,QAAAA,kCAAAC,6CAAAC,oDAAAC;AAAA;AAAA,AAAA,gDAAA,iBAAAC,6BAAA,AAAAC,6CAAA,3IAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,AAAAC;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,0BAAA,sBAA6B;kBAAKE,QAAQC;AAAb,AAAgBD;;CAA7C,4DAAAN,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAM,0FAAA,gEAAA,WAA2CE;AAA3C,AAAA;;AACA,AAAAF,0FAAA,kEAAA,WAA4CE;AAA5C,AAAA;;AACA,AAAAF,0FAAA,mEAAA,WAA4CE;AAA5C,AAAA;;AACA,AAAAF,0FAAA,qEAAA,WAA6CE;AAA7C,AAAA;;AAEA,iDAAA,jDAAMC,0GAAqBC;AAA3B,AACE,yDAAA,lDAACC,sDAAa,AAACC,4CAAIN,8CAAmBI;;AAExC,iCAAA,jCAAMG;AAAN,AACE,YAAA,2CAAA,nDAAMC,kHAAkB,AAACL,+CAAoB,6CAAA,AAAAM,kCAAA,AAAAA,/EAACC,6DAAMC,kCAAQC;AAA5D,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,uBAAA,mFAAA,gDAAA,2CAAA,wDAAA,4BAAA,uDAEkDJ","names":["js/bedug","js/bedug.components","js/bedug.components.canvas","js/bedug.components.canvas.command->transform","method-table__4414__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4415__auto__","method-cache__4416__auto__","cached-hierarchy__4417__auto__","hierarchy__4418__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","bedug.components.canvas/command->transform","command","_","bedug.components.canvas/commands->transform","commands","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","bedug.components.canvas/canvas","style","cljs.core/deref","cljs.core.take.cljs$core$IFn$_invoke$arity$2","bedug.state/step","bedug.state/queue"],"sourcesContent":["(ns bedug.components.canvas\n  (:require [clojure.string :as str]\n            [bedug.state :as s]))\n\n(defmulti command->transform (fn [command _] command))\n\n(defmethod command->transform :go-forward [_] \"translate(0, -30px)\")\n(defmethod command->transform :go-backward [_] \"translate(0, 30px)\")\n(defmethod command->transform :rotate-left [_] \"rotate(-45deg)\")\n(defmethod command->transform :rotate-right [_] \"rotate(45deg)\")\n\n(defn commands->transform [commands]\n  (str/join \" \" (map command->transform commands)))\n\n(defn canvas []\n  (let [style {:transform (commands->transform (take @s/step @s/queue))}]\n    [:div {:class \"bedug-canvas\"}\n     [:i {:class \"bedug-bug fa fa-3x fa-bug\" :style style}]]))\n"]}