{"version":3,"file":"bedug.state.js","sources":["bedug/state.cljs"],"mappings":"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","names":["bedug.state/path","js/window","js/bedug","js/bedug.state","js/bedug.state.player-id","bedug.state/player-id","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","js/bedug.state.full-state","bedug.state/full-state","js/bedug.state.player-state","bedug.state/player-state","bedug.state/send!","type","payload","bedug.state/ws","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","bedug.state/update-player!","seq16795","self__4519__auto__","cljs.core/seq","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/swap!","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","js/bedug.state.handle-message","method-table__4414__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4415__auto__","method-cache__4416__auto__","cached-hierarchy__4417__auto__","hierarchy__4418__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","bedug.state/handle-message","p__16799","map__16800","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","cljs.core/rand-int","bedug.state.update_player_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","p__16802","map__16803","map__16805","id","state","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p__16807","map__16808","map__16810","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/dissoc","_","swapper","players","bedug.utils/map-v","p__16812","map__16813","queue","step","player","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/count","bedug.state/on-message","evt","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__16816","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","js/WebSocket"],"sourcesContent":["(ns bedug.state\n  (:require [reagent.core :as r]\n            [cljs.reader :refer [read-string]]\n            [bedug.utils :refer [map-v]]))\n\n(declare ws)\n\n(def path (-> js/window .-location .-pathname))\n\n;; State atoms\n\n(defonce player-id (r/atom nil))\n\n(defonce full-state (r/atom {:players {}}))\n\n(defonce player-state (r/atom {:queue [] :step 0}))\n\n;; Outgoing messages\n\n(defn send! [type payload]\n  (.send ws (pr-str {:type type :payload payload})))\n\n(defn update-player! [& args]\n  (apply swap! player-state args)\n  (swap! full-state assoc-in [:players @player-id] @player-state)\n  (send! :update-player {:player-id @player-id :player-state @player-state}))\n\n;; Incoming messages\n\n(defmulti handle-message :type)\n\n(defmethod handle-message :init [{:keys [payload]}]\n  (when-not (get-in payload [:players @player-id])\n    (reset! player-id (str (rand-int 99999)))\n    (reset! full-state payload)\n    (update-player! assoc :path path)))\n\n(defmethod handle-message :update-player [{:keys [payload]}]\n  (let [{id :player-id state :player-state} payload]\n    (when (not= id @player-id)\n      (swap! full-state assoc-in [:players id] state))))\n\n(defmethod handle-message :remove-player [{:keys [payload]}]\n  (let [{id :player-id} payload]\n    (swap! full-state update :players dissoc id)))\n\n(defmethod handle-message :tick [_]\n  (let [swapper\n        (fn [players]\n          (map-v\n            (fn [{:keys [queue step] :as player}]\n              (assoc player :step (if (>= step (count queue)) 0 (inc step))))\n            players))]\n    (swap! full-state update :players swapper))\n  (swap! player-state assoc :step (get-in @full-state [:players @player-id :step])))\n\n(defn on-message [evt]\n  (prn \"Handling message\" (.-data evt))\n  (handle-message (cljs.reader/read-string (.-data evt))))\n\n;; Websocket instantiation\n\n(def ws (js/WebSocket. \"ws://192.168.0.4:8080\"))\n\n(.addEventListener ws \"message\" on-message)\n"]}